import string 
from sage.all import * 
from hashlib import sha256 
from Crypto.Util.number import getPrime, bytes_to_long as btl 

FLAG = b'HCMUS-CTF{surely_this_is_the_real_flag_xdd_136825d2dc8a9658e}'

assert len(FLAG) == 61 
assert sha256(FLAG).hexdigest() == '136825d2dc8a9658e7e41d9c9a9180dc7eeed802b7801b9836f9d012c4986f7e'
assert all(x in (string.ascii_letters + string.digits + '_').encode() for x in FLAG.lstrip(b'HCMUS-CTF{')[:-1])

p = getPrime(1024)
q = getPrime(1024)
n = p * q 

M = Matrix(Zmod(n), [
            [btl(FLAG[:len(FLAG) // 4]), btl(FLAG[len(FLAG) // 4:2 * len(FLAG) // 4]) ], 
            [btl(FLAG[2 * len(FLAG) // 4:3*len(FLAG) // 4]), btl(FLAG[3 * len(FLAG) // 4:])]
])

print((M ** 137).list())
print(n)

"""
[2169192725129892957479382530696801658925784122574461243842341121587116564688918646288463349906389105173342080639078403109546009
14699914287183502515733216382953576252807322805938433215283884511286026849140037302128255668390575124459575231083523679322019514
32440517157663797577212946333582939825843144416793673765919935106455638252513969322964512561223861444520929752491522444909776146
50003719298461795168428202252022473090381805601967668716168001385673884581415869746794860840674567800735353071217285789336058361
3698033571302084094347057950024055173717187891255625865344720786162209176050577503621365452892834420482908, 
67750157235883154424680135123660445292032223246500572491987351825274319066253546992160175716322775149062161922044378968152887176
30950674265558424471579379934261423061387690255300260915057506287349048614000887400326223969023178005290868233394083126712565683
73774569825204445595130215692639791421991462977312999789993334667012917621976859326020456524233469752481618664388130646864468187
57963259804294287481926039153517212658847884789105021922976830392291615078259519800457735897252711997030302684824077080554794343
65543441701786970145392381298209766221091865685099163626982227803527124755996798268608818870793594147463, 
19805656005683658088873291548104636829896196804201194286261683596366778438725959990000732010758375657690753180596775446887564516
51690960364021812170398904225352318777979330527423874195371954637769948227714454899495523848213516869708188601051873942156552136
76086722542754976165004449930694588192931379422080716278253141519134709515549183631674991970568688220627233114113081557191177410
19977387785310172531069324042481497564543880315337050521854428532524560247627949955910071265403086111368699033743057797036542497
121498615036564603164280016966031115644726121020982108592073948041869016853349011278093919710667051089318, 
90057784737567099569529004721054195422075038346716868764515725103847290560159775589118270286213652023938335145170927378320250428
10400423025864409701456000761858642776087694831179774913681612317068384159690488570391796593314076934538542263212306534240069221
82481348054885399644317848751460186689502928202870327698542768848563081897764632026440517746460508836322076914393144317348323195
58731246366312497574465686061918031452930757895060497147115832115819175061314474533963562310995894644918305373891344087969645069
212026461007044921987784822880756692119292001292085343438286670425046876954849365019538810083883391619]

25093610144908461464059057408568647065852509496910506454219029231729615790182838521750666866220278951668213036781863233070073888
26473723195516669893125638718670670996768336640522367488651441746142442381160093693591345985115746627180305492343583887283420309
81968477639346195848201426864205449297955317546338139154428192379958755468159026692917877047290758519007873700321442902483737875
26232788049121242923165373815660903262194195632414516883985594279799045995517317604084920418118272895521418338434234634526455272
161460427621237242918538081864414570820209101902145835308168984602150410855452852774414322666120594785481
"""